'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _HistoryControl = require('../HistoryControl');

var _HistoryControl2 = _interopRequireDefault(_HistoryControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (RouteBase) {
  return function (_RouteBase) {
    _inherits(_class, _RouteBase);

    function _class() {
      var _ref;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args)));
    }

    _createClass(_class, [{
      key: 'setToMount',
      value: function setToMount(matchData, options) {
        var _this2 = this;

        if (!options.matchChange) {
          return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'setToMount', this).call(this, matchData, options);
        }
        this.checkFilter(this.props.enterFilter, function (passed) {
          if (!passed) {
            return;
          }
          _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'setToMount', _this2).call(_this2, matchData, options);
        });
      }

      /** check 'leaveFilter' tag and link */

    }, {
      key: 'setToUnmount',
      value: function setToUnmount(matchData, options) {
        var _this3 = this;

        if (!options.matchChange) {
          return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'setToUnmount', this).call(this, matchData, options);
        }
        this.checkFilter(this.props.leaveFilter, function (passed) {
          if (!passed) {
            return;
          }
          _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'setToUnmount', _this3).call(_this3, matchData, options);
        });
      }

      /**
       * check filters
       * @param { Function or Array of function } filters : filters to check in order
       * @param { Function } callback(passed)
       *   @passed { Boolean } : pass result of filters
       */

    }, {
      key: 'checkFilter',
      value: function checkFilter(filters, callback) {
        var _this4 = this;

        if (!filters) {
          callback(true);
          return;
        }
        if (!(filters instanceof Array)) {
          filters = [filters];
        }
        var tempFilters = [];
        for (var i = 0; i < filters.length; i++) {
          if (typeof filters[i] === 'function') {
            tempFilters.push(filters[i]);
          }
        }
        filters = tempFilters;

        if (filters.length === 0) {
          callback(true);
          return;
        }

        var pointer = 0; // record the index of the running filter

        var filterCallback = function filterCallback() {
          if (pointer === filters.length - 1) {
            callback(true);
          } else {
            filters[++pointer](filterCallback, _this4.props);
          }
        };

        filters[0](filterCallback, this.props);
      }
    }]);

    return _class;
  }(RouteBase);
};