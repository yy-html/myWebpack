'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Util = require('../utils/Util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (RouteBase) {
  return function (_RouteBase) {
    _inherits(_class2, _RouteBase);

    function _class2() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, _class2);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class2.__proto__ || Object.getPrototypeOf(_class2)).call.apply(_ref, [this].concat(args))), _this), _this.checkMissTag = function () {
        var miss = _this.props.miss;


        if (!miss) {
          return;
        }
        window.clearTimeout(_this.missTimer);
        _this.missTimer = setTimeout(function () {
          _this.checkMissMatch();
        }, 0);
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    /** check 'miss' tag */


    _createClass(_class2, [{
      key: 'setToMatch',
      value: function setToMatch(matchData, options) {
        this.addToParent();
        _get(_class2.prototype.__proto__ || Object.getPrototypeOf(_class2.prototype), 'setToMatch', this).call(this, matchData, options);
      }
    }, {
      key: 'setToUnmount',
      value: function setToUnmount(matchData, options) {
        this.removeFromParent();
        _get(_class2.prototype.__proto__ || Object.getPrototypeOf(_class2.prototype), 'setToUnmount', this).call(this, matchData, options);
        this.checkMissTag();
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        window.clearTimeout(this.missTimer);
        this.removeFromParent();
        _get(_class2.prototype.__proto__ || Object.getPrototypeOf(_class2.prototype), 'componentWillUnmount', this) && _get(_class2.prototype.__proto__ || Object.getPrototypeOf(_class2.prototype), 'componentWillUnmount', this).call(this);
      }

      /** add this to parent' cached children list */

    }, {
      key: 'addToParent',
      value: function addToParent() {
        var parent = this.getParentRoute();
        if (!parent) return;
        if (!parent.children) {
          parent.children = [];
        }
        for (var i = 0; i < parent.children.length; i++) {
          if (parent.children[i] === this) {
            return;
          }
        }
        parent.children.push(this);
      }

      /** remove this from parent' cached children list */

    }, {
      key: 'removeFromParent',
      value: function removeFromParent() {
        var parent = this.getParentRoute();
        if (!parent || !parent.children || !parent.children.length) return;
        for (var i = 0; i < parent.children.length; i++) {
          if (parent.children[i] === this) {
            parent.children.splice(i, 1);
            break;
          }
        }
      }

      /**
       * 'miss' property support
       * when no component matched, this one will match if condition
       */

    }, {
      key: 'checkMissMatch',
      value: function checkMissMatch() {
        var parent = this.getParentRoute();
        if (!parent) {
          return;
        }
        if (!parent.children || !parent.children.length) {
          var parentPath = this.getParentPath();

          var _ref2 = this.context.history.getCurrentLocation() || {},
              pathname = _ref2.pathname;

          this.setToMatch({
            match: true,
            matcher: {
              pattern: null,
              match: true,
              params: {},
              matchStr: pathname && (0, _Util.resetPath)(pathname).substring(parentPath.length),
              lastIndex: 0
            }
          }, this.getMatchOptions(true));
        }
      }

      /** get parent */

    }, {
      key: 'getParentRoute',
      value: function getParentRoute() {
        return this.context.parent || this.context.router;
      }
    }]);

    return _class2;
  }(RouteBase);
};