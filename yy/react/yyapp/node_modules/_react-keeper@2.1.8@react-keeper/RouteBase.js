'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _functional = require('./utils/functional');

var _functional2 = _interopRequireDefault(_functional);

var _InnerRouter = require('./InnerRouter');

var _InnerRouter2 = _interopRequireDefault(_InnerRouter);

var _RouteControl = require('./utils/RouteControl');

var _HistoryControl = require('./HistoryControl');

var _HistoryControl2 = _interopRequireDefault(_HistoryControl);

var _matchPath = require('./match/matchPath');

var _matchPath2 = _interopRequireDefault(_matchPath);

var _Util = require('./utils/Util');

var _Logger = require('./utils/Logger');

var _Logger2 = _interopRequireDefault(_Logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RouteBase = function (_React$Component) {
  _inherits(RouteBase, _React$Component);

  function RouteBase() {
    var _ref;

    _classCallCheck(this, RouteBase);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = RouteBase.__proto__ || Object.getPrototypeOf(RouteBase)).call.apply(_ref, [this].concat(args)));

    _this.locationChanged = function () {
      _this.routeCheckEntry();
    };

    _this.state = {
      status: 0, // 0: unmount, 1: mounted
      mountBy: 0 // 0: mount by route or none, 1: mount by 'cache', 2: mount by 'CacheLink'
    };
    _this.unsubscribe = _this.context.subscribe(_this.locationChanged);

    _this.matcher = null; // dont use state to save matcher, for state will change after component is mounted.
    _this.component = null;

    if (!_this.context.history) {
      throw new Error('Route must be used in Router Component ( HashRouter,BrowserRouter or MemoryRouter )!');
    }
    return _this;
  }

  /** location change listener */


  _createClass(RouteBase, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.locationChanged();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unsubscribe();
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        parent: this
      };
    }

    /** dirty check */

  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (this.props.offDirtyCheck) {
        return true;
      }
      if (nextState.status) {
        return true;
      }
      return !(0, _Util.compare)(nextProps, this.props) || !(0, _Util.compare)(nextState, this.state);
    }

    /**
     * entry of check
     * compute route mount's state
     */

  }, {
    key: 'routeCheckEntry',
    value: function routeCheckEntry() {
      var matchData = this.checkPath(this.context.history.getCurrentLocation() || {});
      if (matchData.match) {
        this.setToMatch(matchData, this.getMatchOptions(matchData.match));
      } else {
        this.setToUnmount(matchData, this.getMatchOptions(matchData.match));
      }
    }

    /**
     * get match(or no-match) options
     */

  }, {
    key: 'getMatchOptions',
    value: function getMatchOptions(match) {
      var matchChange = false;
      if (match) {
        if (!this.matcher || !this.matcher.match) {
          matchChange = true;
        }
      } else {
        if (this.matcher && this.matcher.match) {
          matchChange = true;
        }
      }
      return { matchChange: matchChange };
    }

    /** set state to match */

  }, {
    key: 'setToMatch',
    value: function setToMatch(matchData, options) {
      var _this2 = this;

      this.loadComponent(function (succeed, component) {
        if (!succeed) {
          return;
        }

        _this2.setToMount(matchData, options);
      });
    }

    /**
     * set to mount state
     * (also invoke by outside)
     */

  }, {
    key: 'setToMount',
    value: function setToMount(matchData, options) {
      this.updateMountStatus({ status: 1, matchData: matchData });
    }

    /**
     * set to unmount state
     */

  }, {
    key: 'setToUnmount',
    value: function setToUnmount(matchData, _ref2) {
      var matchChange = _ref2.matchChange;

      this.updateMountStatus({ status: 0 });
    }

    /** update bind state */

  }, {
    key: 'updateMountStatus',
    value: function updateMountStatus(_ref3) {
      var status = _ref3.status,
          mountBy = _ref3.mountBy,
          matchData = _ref3.matchData;


      if (typeof mountBy === 'undefined' || mountBy === null) {
        mountBy = 0;
      }

      this.matcher = matchData;
      if (status === 1) {
        this.setState({
          status: status,
          mountBy: mountBy,
          selfPathname: this.getSelfPath(matchData && matchData.matcher)
        });
      } else {
        this.setState({ status: status, mountBy: mountBy });
      }
    }

    /** get parents' path */

  }, {
    key: 'getParentPath',
    value: function getParentPath() {
      var paths = [];
      var rou = this;
      var path = void 0;
      while (rou.context.parent) {
        if (rou.context.parent.matcher && rou.context.parent.matcher.matcher) {
          path = rou.context.parent.matcher.matcher.matchStr;
          if (path && path.indexOf('/') !== 0) {
            path = '/' + path;
          }
          paths.unshift(path);
        }
        rou = rou.context.parent;
      }

      return paths.join('').replace(/[/]{2,}/g, '/');
    }

    /** getSelfPath */

  }, {
    key: 'getSelfPath',
    value: function getSelfPath(matcher) {
      return ('' + this.getParentPath() + (matcher ? matcher.matchStr : '')).replace(/[/]{2,}/g, '/');
    }

    /** check path match */

  }, {
    key: 'checkPath',
    value: function checkPath(location) {
      var pattern = this.props.path;

      var _ref4 = location || {},
          pathname = _ref4.pathname;

      if (typeof pathname === 'undefined') {
        return { match: false };
      }
      pathname = (0, _Util.resetPath)(pathname);
      var parentPath = this.getParentPath();

      if (!pattern) {
        return { match: false };
      }
      pattern = (0, _Util.resetPath)(pattern);

      var checkPathname = pathname;
      if (parentPath) {
        checkPathname = pathname.substring(parentPath.length);
      }

      var matcher = (0, _matchPath2.default)(checkPathname, pattern);

      if (matcher.match) {
        return { match: true, matcher: matcher };
      }
      return { match: false };
    }

    /** load component, contains dynamic component */

  }, {
    key: 'loadComponent',
    value: function loadComponent(callback) {
      var _this3 = this;

      if (this.component) {
        callback(true, this.component);
        return;
      }
      var _props = this.props,
          component = _props.component,
          dynamicComponent = _props.loadComponent;

      if (component) {
        this.component = component ? (0, _Util.isStatelessComponent)(component) ? (0, _functional2.default)({ render: component }) : component : null;
        callback(true, this.component);
        return;
      }
      if (dynamicComponent) {
        dynamicComponent(function (comp) {
          _this3.component = comp ? (0, _Util.isStatelessComponent)(comp) ? (0, _functional2.default)({ render: comp }) : comp : null;
          callback(true, _this3.component);
        });
        return;
      }
      callback(true, null);
    }

    /** render */

  }, {
    key: 'render',
    value: function render() {

      /** 1. unmount state */
      if (this.state.status === 0) {
        return null;
      }

      var children = this.props.children;

      /** mount state */
      if (this.component) {
        var props = (0, _Util.objectWithoutProperties)(this.props, ['children', 'component', 'loadComponent', 'enterFilter', 'leaveFilter', 'path', 'redirect', 'cache', 'index', 'miss']);
        // add route state to props
        props.route = { isActive: this.state.mountBy === 0 };

        props.ref = 'component';

        // create element
        return _react2.default.createElement(this.component, _extends({ pathname: this.state.selfPathname
        }, props, {
          params: this.matcher && this.matcher.matcher ? this.matcher.matcher.params || {} : {}
        }), children);
      }
      if (_react2.default.isValidElement(children)) {
        return _react2.default.cloneElement(_react2.default.Children.only(children), { ref: 'component' });
      }
      _Logger2.default.error('When `Route` component has no component property, it\'s children must be a single tag (not an array), like `div`|`view` .');
      return null;
    }
  }]);

  return RouteBase;
}(_react2.default.Component);

exports.default = RouteBase;


if (process.env.NODE_ENV !== 'production') {

  RouteBase.propTypes = {
    component: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func]),
    loadComponent: _propTypes2.default.func,
    enterFilter: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.func]),
    leaveFilter: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.func]),
    path: _propTypes2.default.string,
    redirect: _propTypes2.default.string,
    cache: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),
    index: _propTypes2.default.bool,
    miss: _propTypes2.default.bool,
    offDirtyCheck: _propTypes2.default.bool,
    children: _propTypes2.default.any
  };
}

RouteBase.contextTypes = {
  history: _propTypes2.default.object,
  subscribe: _propTypes2.default.func,
  parent: _propTypes2.default.instanceOf(RouteBase),
  router: _propTypes2.default.any
};

RouteBase.childContextTypes = {
  parent: _propTypes2.default.instanceOf(RouteBase)
};