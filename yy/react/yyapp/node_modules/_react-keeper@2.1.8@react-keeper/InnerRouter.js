'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Logger = require('./utils/Logger');

var _Logger2 = _interopRequireDefault(_Logger);

var _RouteBase = require('./RouteBase');

var _RouteBase2 = _interopRequireDefault(_RouteBase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InnerRouter = function (_React$Component) {
  _inherits(InnerRouter, _React$Component);

  function InnerRouter() {
    var _ref;

    _classCallCheck(this, InnerRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = InnerRouter.__proto__ || Object.getPrototypeOf(InnerRouter)).call.apply(_ref, [this].concat(args)));

    _this.getChildContext = function () {
      return {
        subscribe: _this.subscribe,
        router: _this
      };
    };

    _this.subscribe = function (callback) {
      if (_this.subscribers.indexOf(callback) < 0) {
        _this.subscribers.push(callback);
      }
      return function () {
        var index = _this.subscribers.indexOf(callback);
        if (index >= 0) {
          _this.subscribers.splice(index, 1);
        }
      };
    };

    _this.notify = function () {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _this.subscribers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var fn = _step.value;

          fn();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    };

    _this.subscribers = [];
    return _this;
  }

  /** get child context */


  _createClass(InnerRouter, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.location !== this.props.location) {
        this.notify();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.props.children || this.props.children.length === 0) {
        return null;
      }

      if (this.props.children.length > 0) {
        _Logger2.default.error('Router must have only one children.');
        return null;
      }

      if (_react2.default.isValidElement(this.props.children)) {
        return _react2.default.Children.only(this.props.children);
      }
      _Logger2.default.error('The children of `*Router` component must be a single tag (not an array), like `div`|`view` .');
      return null;
    }
  }]);

  return InnerRouter;
}(_react2.default.Component);

exports.default = InnerRouter;


InnerRouter.childContextTypes = {
  subscribe: _propTypes2.default.func,
  router: _propTypes2.default.instanceOf(InnerRouter) // to support root's Route's 'miss' tag
};