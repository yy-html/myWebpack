'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * the cache of link controlle
 */

/**
 * clear cache route
 * 
 * two ways to call 'clear'
 *   - CacheLink click(also call history changed, but will reset targetPath=history.location)
 *   - history changed
 */
var clear = function clear() {
  targetPath = '';
  cacheStack = [];
};

/** add cache route */
var add = exports.add = function add(srcRoute, _targetPath) {
  if (_targetPath !== targetPath) {
    clear();
  }
  if (!srcRoute || !_targetPath) {
    return;
  }
  targetPath = _targetPath;

  var children = srcRoute.children || [];
  var endChild = null;
  while (children.length > 0) {
    for (var i = 0; i < children.length; i++) {
      endChild = children[i];
      if (endChild.status && endChild.mountBy === 0) {
        break;
      }
    }
    children = endChild.children || [];
  }
  cacheStack.push(endChild || srcRoute);
};

/** history listener */
var onHistoryChanged = exports.onHistoryChanged = function onHistoryChanged(location) {

  // CacheLinkâ€˜s click will reset targetPath=location.pathname, so will not call clear twice.
  if (location.pathname !== targetPath) {
    clear();
  }
};

/** judge if route should cache */
var isCached = exports.isCached = function isCached(srcRoute) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = cacheStack[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var route = _step.value;

      if (route === srcRoute) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return false;
};

var cacheStack = [];
var targetPath = '';

exports.default = {
  add: add,
  isCached: isCached,
  onHistoryChanged: onHistoryChanged
};