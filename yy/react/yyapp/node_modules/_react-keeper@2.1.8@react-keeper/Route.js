'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RouteBase = require('./RouteBase');

var _RouteBase2 = _interopRequireDefault(_RouteBase);

var _RouteIndex = require('./middleware/RouteIndex');

var _RouteIndex2 = _interopRequireDefault(_RouteIndex);

var _RouteCache = require('./middleware/RouteCache');

var _RouteCache2 = _interopRequireDefault(_RouteCache);

var _RouteFilter = require('./middleware/RouteFilter');

var _RouteFilter2 = _interopRequireDefault(_RouteFilter);

var _RouteRedirect = require('./middleware/RouteRedirect');

var _RouteRedirect2 = _interopRequireDefault(_RouteRedirect);

var _RouteMiss2 = require('./middleware/RouteMiss');

var _RouteMiss3 = _interopRequireDefault(_RouteMiss2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Route = function (_RouteMiss) {
  _inherits(Route, _RouteMiss);

  function Route() {
    _classCallCheck(this, Route);

    return _possibleConstructorReturn(this, (Route.__proto__ || Object.getPrototypeOf(Route)).apply(this, arguments));
  }

  return Route;
}((0, _RouteMiss3.default)((0, _RouteCache2.default)((0, _RouteRedirect2.default)((0, _RouteFilter2.default)((0, _RouteIndex2.default)(_RouteBase2.default))))));

exports.default = Route;